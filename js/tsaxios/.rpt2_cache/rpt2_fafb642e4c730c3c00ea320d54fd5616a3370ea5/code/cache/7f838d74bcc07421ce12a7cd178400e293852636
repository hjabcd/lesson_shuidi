{"map":"{\"version\":3,\"file\":\"axios.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/axios.ts\"],\"names\":[],\"mappings\":\";AAAA,uBAAuB;AACvB,yBAAyB;AACzB,8EAA8E;AAC9E,IAAI;AACJ,OAAO;AACP,oCAAoC;AACpC,UAAU;AACV,6CAA6C;AAC7C,sBAAsB;AACtB,qBAAqB;AACrB,iDAAiD;AACjD,MAAM;AACN,gBAAgB;AAChB,oBAAoB;AACpB,MAAM;AACN,cAAc;AACd,YAAY;AACZ,MAAM;AACN,IAAI;AAEJ,QAAQ;AACR,SAAS,GAAG,CAAC,GAAW;IACtB,OAAO,GAAG,CAAC;AACb,CAAC;AACD,SAAS,IAAI,CAAC,GAAW;IACvB,OAAO,GAAG,CAAC;AACb,CAAC;AACD,SAAS,IAAI,CAAC,GAAY;IACxB,OAAO,GAAG,CAAC;AACb,CAAC;AACD,GAAG,CAAC,CAAC,CAAC,CAAA;AACN,IAAI,CAAC,GAAG,CAAC,CAAA;AACT,IAAI,CAAC,IAAI,CAAC,CAAA;AACV,eAAe;AACf,kBAAkB;AAClB,iCAAiC;AACjC,gBAAgB;AAChB,IAAI;AAEJ,YAAY;AACZ,WAAW;AACX,yCAAyC;AACzC,GAAG;AACH,SAAS,KAAK,CAAI,GAAM;IACtB,OAAO,GAAG,CAAC;AACb,CAAC;AACD,KAAK,CAAS,GAAG,CAAC,CAAC;AACnB,KAAK,CAAS,KAAK,CAAC,CAAC;AAErB,UAAU;AACV,cAAc;AACd,wBAAwB;AACxB,QAAQ;AACR;IAEE;QACE,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;IAChB,CAAC;IACD,oBAAI,GAAJ,UAAK,GAAM;QACT,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IACD,mBAAG,GAAH;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,CAAC;IACH,YAAC;AAAD,CAAC,AAXD,IAWC;AAMD,IAAI,EAAE,GAAG,IAAI,KAAK,EAAU,CAAC;AAC7B,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACb,IAAI,GAAG,GAAG,IAAI,KAAK,EAAkB,CAAC;AACtC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC\"}","code":"\"use strict\";\r\n// interface Array<T> {\r\n//   pop(): T | undefined\r\n//   some(callbackfn: (value: T, index: number, arr: T[]) => boolean): boolean\r\n// }\r\n// // 1\r\n// let arr: number[] = [1, 2, 3, 4];\r\n// // 2：泛型\r\n// let arr1: Array<string> = ['4', '5', '6'];\r\n// let a = arr1.pop();\r\n// let b = arr.pop();\r\n// let flag = arr.some((num, i, arr) => num > 2);\r\n// 每一项\r\n// class Stack {\r\n//   constructor() {\r\n//   }\r\n//   push() {}\r\n//   pop() {\r\n//   }\r\n// }\r\n// 类型的抽象\r\nfunction foo(arg) {\r\n    return arg;\r\n}\r\nfunction foo1(arg) {\r\n    return arg;\r\n}\r\nfunction foo2(arg) {\r\n    return arg;\r\n}\r\nfoo(1);\r\nfoo1('1');\r\nfoo2(true);\r\n// 输入类 输出类型 不一致\r\n// number ： string\r\n// function foo3(arg: any): any {\r\n//   return arg;\r\n// }\r\n// 不一致的地方：类型\r\n// 公共地方： 功能\r\n// 使用函数的时候，可以传入一个类型，多定义了参数，这个参数是个类型 T U K\r\n// \r\nfunction myfoo(arg) {\r\n    return arg;\r\n}\r\nmyfoo(123);\r\nmyfoo('123');\r\n// 靠js数组实现\r\n// js数组：指定数组类型\r\n// number 写死？？ string ？？\r\n// T 用户 \r\nvar Stack = /** @class */ (function () {\r\n    function Stack() {\r\n        this.eles = [];\r\n    }\r\n    Stack.prototype.push = function (arg) {\r\n        this.eles.push(arg);\r\n    };\r\n    Stack.prototype.pop = function () {\r\n        return this.eles.pop();\r\n    };\r\n    return Stack;\r\n}());\r\nvar st = new Stack();\r\nst.push('3');\r\nvar st1 = new Stack();\r\nst1.push({ name: 'n', age: 89, say: 78 });\r\n//# sourceMappingURL=axios.js.map","dts":{"name":"/Users/zhaomeng/Downloads/js-fullstatck/node/tsaxios/dist/types/axios.d.ts","writeByteOrderMark":false,"text":"declare function foo(arg: number): number;\r\ndeclare function foo1(arg: string): string;\r\ndeclare function foo2(arg: boolean): boolean;\r\ndeclare function myfoo<T>(arg: T): T;\r\ndeclare class Stack<T> {\r\n    eles: T[];\r\n    constructor();\r\n    push(arg: T): void;\r\n    pop(): T | undefined;\r\n}\r\ninterface Person<T> {\r\n    name: string;\r\n    age: number;\r\n    say: T;\r\n}\r\ndeclare let st: Stack<string>;\r\ndeclare let st1: Stack<Person<number>>;\r\n"}}
